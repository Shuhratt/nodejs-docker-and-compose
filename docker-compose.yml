version: "3.8"
services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: backend:latest
    container_name: backend-app
    restart: unless-stopped # –ü–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞, –Ω–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª—É–∂–±—ã.
    ports:
      - 4000:3000
    env_file:
      - ./backend/env/.env
    depends_on:
      db:
        condition: service_healthy
    command: sh -c "echo 'üì¶ Starting migrations...' && npx typeorm migration:run -d ./data-source.js && echo 'üöÄ Starting server...' && npm run start:prod"
    networks:
      - backend-network
      - frontend-network

  db:
    image: "postgres:17"
    container_name: db-app
    restart: unless-stopped
    env_file:
      - ./backend/env/.env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  adminer:
    image: adminer
    container_name: adminer-app
    restart: unless-stopped
    ports:
      - 8080:8080
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: frontend:latest
    container_name: frontend-app
    ports:
      - 8081:80
    restart: unless-stopped
    networks:
      - frontend-network
networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge
